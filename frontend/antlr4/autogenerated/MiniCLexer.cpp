
// Generated from MiniC.g4 by ANTLR 4.12.0


#include "MiniCLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct MiniCLexerStaticData final {
  MiniCLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MiniCLexerStaticData(const MiniCLexerStaticData&) = delete;
  MiniCLexerStaticData(MiniCLexerStaticData&&) = delete;
  MiniCLexerStaticData& operator=(const MiniCLexerStaticData&) = delete;
  MiniCLexerStaticData& operator=(MiniCLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag miniclexerLexerOnceFlag;
MiniCLexerStaticData *miniclexerLexerStaticData = nullptr;

void miniclexerLexerInitialize() {
  assert(miniclexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<MiniCLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "DEFINE", 
      "BREAK", "CONTINUE", "IF", "ELSE", "WHILE", "RETURN", "CONST", "INT", 
      "FLOAT", "VOID", "Ident", "IntConst", "FloatConst", "StringConst", 
      "Whitespace", "BlockComment", "LineComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'#'", "','", "';'", "'['", "']'", "'='", "'{'", "'}'", "'('", 
      "')'", "'+'", "'-'", "'!'", "'*'", "'/'", "'%'", "'<'", "'>'", "'<='", 
      "'>='", "'=='", "'!='", "'&&'", "'||'", "'define'", "'break'", "'continue'", 
      "'if'", "'else'", "'while'", "'return'", "'const'", "'int'", "'float'", 
      "'void'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "DEFINE", "BREAK", "CONTINUE", "IF", 
      "ELSE", "WHILE", "RETURN", "CONST", "INT", "FLOAT", "VOID", "Ident", 
      "IntConst", "FloatConst", "StringConst", "Whitespace", "BlockComment", 
      "LineComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,42,341,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,1,0,
  	1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
  	9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,
  	1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,
  	1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
  	1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,
  	1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,
  	1,34,1,35,1,35,5,35,206,8,35,10,35,12,35,209,9,35,1,36,1,36,1,36,1,36,
  	4,36,215,8,36,11,36,12,36,216,1,36,1,36,1,36,1,36,4,36,223,8,36,11,36,
  	12,36,224,1,36,1,36,4,36,229,8,36,11,36,12,36,230,1,36,1,36,5,36,235,
  	8,36,10,36,12,36,238,9,36,1,36,3,36,241,8,36,1,37,4,37,244,8,37,11,37,
  	12,37,245,1,37,1,37,5,37,250,8,37,10,37,12,37,253,9,37,1,37,1,37,3,37,
  	257,8,37,1,37,4,37,260,8,37,11,37,12,37,261,3,37,264,8,37,1,37,1,37,4,
  	37,268,8,37,11,37,12,37,269,1,37,1,37,3,37,274,8,37,1,37,4,37,277,8,37,
  	11,37,12,37,278,3,37,281,8,37,1,37,4,37,284,8,37,11,37,12,37,285,1,37,
  	1,37,3,37,290,8,37,1,37,4,37,293,8,37,11,37,12,37,294,3,37,297,8,37,1,
  	38,1,38,1,38,1,38,5,38,303,8,38,10,38,12,38,306,9,38,1,38,1,38,1,39,4,
  	39,311,8,39,11,39,12,39,312,1,39,1,39,1,40,1,40,1,40,1,40,5,40,321,8,
  	40,10,40,12,40,324,9,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,
  	5,41,335,8,41,10,41,12,41,338,9,41,1,41,1,41,1,322,0,42,1,1,3,2,5,3,7,
  	4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
  	17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
  	57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
  	40,81,41,83,42,1,0,11,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
  	122,3,0,48,57,65,70,97,102,1,0,48,55,1,0,49,57,1,0,48,57,2,0,69,69,101,
  	101,2,0,43,43,45,45,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,2,0,10,
  	10,13,13,368,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
  	0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
  	0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
  	1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
  	0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
  	0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
  	1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
  	0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,
  	1,85,1,0,0,0,3,87,1,0,0,0,5,89,1,0,0,0,7,91,1,0,0,0,9,93,1,0,0,0,11,95,
  	1,0,0,0,13,97,1,0,0,0,15,99,1,0,0,0,17,101,1,0,0,0,19,103,1,0,0,0,21,
  	105,1,0,0,0,23,107,1,0,0,0,25,109,1,0,0,0,27,111,1,0,0,0,29,113,1,0,0,
  	0,31,115,1,0,0,0,33,117,1,0,0,0,35,119,1,0,0,0,37,121,1,0,0,0,39,124,
  	1,0,0,0,41,127,1,0,0,0,43,130,1,0,0,0,45,133,1,0,0,0,47,136,1,0,0,0,49,
  	139,1,0,0,0,51,146,1,0,0,0,53,152,1,0,0,0,55,161,1,0,0,0,57,164,1,0,0,
  	0,59,169,1,0,0,0,61,175,1,0,0,0,63,182,1,0,0,0,65,188,1,0,0,0,67,192,
  	1,0,0,0,69,198,1,0,0,0,71,203,1,0,0,0,73,240,1,0,0,0,75,296,1,0,0,0,77,
  	298,1,0,0,0,79,310,1,0,0,0,81,316,1,0,0,0,83,330,1,0,0,0,85,86,5,35,0,
  	0,86,2,1,0,0,0,87,88,5,44,0,0,88,4,1,0,0,0,89,90,5,59,0,0,90,6,1,0,0,
  	0,91,92,5,91,0,0,92,8,1,0,0,0,93,94,5,93,0,0,94,10,1,0,0,0,95,96,5,61,
  	0,0,96,12,1,0,0,0,97,98,5,123,0,0,98,14,1,0,0,0,99,100,5,125,0,0,100,
  	16,1,0,0,0,101,102,5,40,0,0,102,18,1,0,0,0,103,104,5,41,0,0,104,20,1,
  	0,0,0,105,106,5,43,0,0,106,22,1,0,0,0,107,108,5,45,0,0,108,24,1,0,0,0,
  	109,110,5,33,0,0,110,26,1,0,0,0,111,112,5,42,0,0,112,28,1,0,0,0,113,114,
  	5,47,0,0,114,30,1,0,0,0,115,116,5,37,0,0,116,32,1,0,0,0,117,118,5,60,
  	0,0,118,34,1,0,0,0,119,120,5,62,0,0,120,36,1,0,0,0,121,122,5,60,0,0,122,
  	123,5,61,0,0,123,38,1,0,0,0,124,125,5,62,0,0,125,126,5,61,0,0,126,40,
  	1,0,0,0,127,128,5,61,0,0,128,129,5,61,0,0,129,42,1,0,0,0,130,131,5,33,
  	0,0,131,132,5,61,0,0,132,44,1,0,0,0,133,134,5,38,0,0,134,135,5,38,0,0,
  	135,46,1,0,0,0,136,137,5,124,0,0,137,138,5,124,0,0,138,48,1,0,0,0,139,
  	140,5,100,0,0,140,141,5,101,0,0,141,142,5,102,0,0,142,143,5,105,0,0,143,
  	144,5,110,0,0,144,145,5,101,0,0,145,50,1,0,0,0,146,147,5,98,0,0,147,148,
  	5,114,0,0,148,149,5,101,0,0,149,150,5,97,0,0,150,151,5,107,0,0,151,52,
  	1,0,0,0,152,153,5,99,0,0,153,154,5,111,0,0,154,155,5,110,0,0,155,156,
  	5,116,0,0,156,157,5,105,0,0,157,158,5,110,0,0,158,159,5,117,0,0,159,160,
  	5,101,0,0,160,54,1,0,0,0,161,162,5,105,0,0,162,163,5,102,0,0,163,56,1,
  	0,0,0,164,165,5,101,0,0,165,166,5,108,0,0,166,167,5,115,0,0,167,168,5,
  	101,0,0,168,58,1,0,0,0,169,170,5,119,0,0,170,171,5,104,0,0,171,172,5,
  	105,0,0,172,173,5,108,0,0,173,174,5,101,0,0,174,60,1,0,0,0,175,176,5,
  	114,0,0,176,177,5,101,0,0,177,178,5,116,0,0,178,179,5,117,0,0,179,180,
  	5,114,0,0,180,181,5,110,0,0,181,62,1,0,0,0,182,183,5,99,0,0,183,184,5,
  	111,0,0,184,185,5,110,0,0,185,186,5,115,0,0,186,187,5,116,0,0,187,64,
  	1,0,0,0,188,189,5,105,0,0,189,190,5,110,0,0,190,191,5,116,0,0,191,66,
  	1,0,0,0,192,193,5,102,0,0,193,194,5,108,0,0,194,195,5,111,0,0,195,196,
  	5,97,0,0,196,197,5,116,0,0,197,68,1,0,0,0,198,199,5,118,0,0,199,200,5,
  	111,0,0,200,201,5,105,0,0,201,202,5,100,0,0,202,70,1,0,0,0,203,207,7,
  	0,0,0,204,206,7,1,0,0,205,204,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,
  	207,208,1,0,0,0,208,72,1,0,0,0,209,207,1,0,0,0,210,211,5,48,0,0,211,212,
  	5,120,0,0,212,214,1,0,0,0,213,215,7,2,0,0,214,213,1,0,0,0,215,216,1,0,
  	0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,241,1,0,0,0,218,219,5,48,0,0,
  	219,220,5,88,0,0,220,222,1,0,0,0,221,223,7,2,0,0,222,221,1,0,0,0,223,
  	224,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,241,1,0,0,0,226,228,5,
  	48,0,0,227,229,7,3,0,0,228,227,1,0,0,0,229,230,1,0,0,0,230,228,1,0,0,
  	0,230,231,1,0,0,0,231,241,1,0,0,0,232,236,7,4,0,0,233,235,7,5,0,0,234,
  	233,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,241,1,
  	0,0,0,238,236,1,0,0,0,239,241,5,48,0,0,240,210,1,0,0,0,240,218,1,0,0,
  	0,240,226,1,0,0,0,240,232,1,0,0,0,240,239,1,0,0,0,241,74,1,0,0,0,242,
  	244,7,5,0,0,243,242,1,0,0,0,244,245,1,0,0,0,245,243,1,0,0,0,245,246,1,
  	0,0,0,246,247,1,0,0,0,247,251,5,46,0,0,248,250,7,5,0,0,249,248,1,0,0,
  	0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,263,1,0,0,0,253,
  	251,1,0,0,0,254,256,7,6,0,0,255,257,7,7,0,0,256,255,1,0,0,0,256,257,1,
  	0,0,0,257,259,1,0,0,0,258,260,7,5,0,0,259,258,1,0,0,0,260,261,1,0,0,0,
  	261,259,1,0,0,0,261,262,1,0,0,0,262,264,1,0,0,0,263,254,1,0,0,0,263,264,
  	1,0,0,0,264,297,1,0,0,0,265,267,5,46,0,0,266,268,7,5,0,0,267,266,1,0,
  	0,0,268,269,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,280,1,0,0,0,271,
  	273,7,6,0,0,272,274,7,7,0,0,273,272,1,0,0,0,273,274,1,0,0,0,274,276,1,
  	0,0,0,275,277,7,5,0,0,276,275,1,0,0,0,277,278,1,0,0,0,278,276,1,0,0,0,
  	278,279,1,0,0,0,279,281,1,0,0,0,280,271,1,0,0,0,280,281,1,0,0,0,281,297,
  	1,0,0,0,282,284,7,5,0,0,283,282,1,0,0,0,284,285,1,0,0,0,285,283,1,0,0,
  	0,285,286,1,0,0,0,286,287,1,0,0,0,287,289,7,6,0,0,288,290,7,7,0,0,289,
  	288,1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,293,7,5,0,0,292,291,1,
  	0,0,0,293,294,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,
  	296,243,1,0,0,0,296,265,1,0,0,0,296,283,1,0,0,0,297,76,1,0,0,0,298,304,
  	5,34,0,0,299,303,8,8,0,0,300,301,5,92,0,0,301,303,9,0,0,0,302,299,1,0,
  	0,0,302,300,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,
  	307,1,0,0,0,306,304,1,0,0,0,307,308,5,34,0,0,308,78,1,0,0,0,309,311,7,
  	9,0,0,310,309,1,0,0,0,311,312,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,
  	313,314,1,0,0,0,314,315,6,39,0,0,315,80,1,0,0,0,316,317,5,47,0,0,317,
  	318,5,42,0,0,318,322,1,0,0,0,319,321,9,0,0,0,320,319,1,0,0,0,321,324,
  	1,0,0,0,322,323,1,0,0,0,322,320,1,0,0,0,323,325,1,0,0,0,324,322,1,0,0,
  	0,325,326,5,42,0,0,326,327,5,47,0,0,327,328,1,0,0,0,328,329,6,40,0,0,
  	329,82,1,0,0,0,330,331,5,47,0,0,331,332,5,47,0,0,332,336,1,0,0,0,333,
  	335,8,10,0,0,334,333,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,
  	1,0,0,0,337,339,1,0,0,0,338,336,1,0,0,0,339,340,6,41,0,0,340,84,1,0,0,
  	0,25,0,207,216,224,230,236,240,245,251,256,261,263,269,273,278,280,285,
  	289,294,296,302,304,312,322,336,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  miniclexerLexerStaticData = staticData.release();
}

}

MiniCLexer::MiniCLexer(CharStream *input) : Lexer(input) {
  MiniCLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *miniclexerLexerStaticData->atn, miniclexerLexerStaticData->decisionToDFA, miniclexerLexerStaticData->sharedContextCache);
}

MiniCLexer::~MiniCLexer() {
  delete _interpreter;
}

std::string MiniCLexer::getGrammarFileName() const {
  return "MiniC.g4";
}

const std::vector<std::string>& MiniCLexer::getRuleNames() const {
  return miniclexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& MiniCLexer::getChannelNames() const {
  return miniclexerLexerStaticData->channelNames;
}

const std::vector<std::string>& MiniCLexer::getModeNames() const {
  return miniclexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& MiniCLexer::getVocabulary() const {
  return miniclexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView MiniCLexer::getSerializedATN() const {
  return miniclexerLexerStaticData->serializedATN;
}

const atn::ATN& MiniCLexer::getATN() const {
  return *miniclexerLexerStaticData->atn;
}




void MiniCLexer::initialize() {
  ::antlr4::internal::call_once(miniclexerLexerOnceFlag, miniclexerLexerInitialize);
}
