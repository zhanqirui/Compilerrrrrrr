
// Generated from MiniC.g4 by ANTLR 4.12.0


#include "MiniCLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct MiniCLexerStaticData final {
  MiniCLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MiniCLexerStaticData(const MiniCLexerStaticData&) = delete;
  MiniCLexerStaticData(MiniCLexerStaticData&&) = delete;
  MiniCLexerStaticData& operator=(const MiniCLexerStaticData&) = delete;
  MiniCLexerStaticData& operator=(MiniCLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag miniclexerLexerOnceFlag;
MiniCLexerStaticData *miniclexerLexerStaticData = nullptr;

void miniclexerLexerInitialize() {
  assert(miniclexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<MiniCLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "BREAK", "CONTINUE", 
      "IF", "ELSE", "WHILE", "RETURN", "CONST", "INT", "FLOAT", "VOID", 
      "Ident", "IntConst", "FloatConst", "Whitespace", "BlockComment", "LineComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "','", "';'", "'['", "']'", "'='", "'{'", "'}'", "'('", "')'", 
      "'+'", "'-'", "'!'", "'*'", "'/'", "'%'", "'<'", "'>'", "'<='", "'>='", 
      "'=='", "'!='", "'&&'", "'||'", "'break'", "'continue'", "'if'", "'else'", 
      "'while'", "'return'", "'const'", "'int'", "'float'", "'void'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "BREAK", "CONTINUE", "IF", "ELSE", "WHILE", 
      "RETURN", "CONST", "INT", "FLOAT", "VOID", "Ident", "IntConst", "FloatConst", 
      "Whitespace", "BlockComment", "LineComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,39,315,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,
  	4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
  	1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,
  	1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,
  	1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
  	1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,
  	1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
  	1,33,1,33,5,33,191,8,33,10,33,12,33,194,9,33,1,34,1,34,1,34,1,34,4,34,
  	200,8,34,11,34,12,34,201,1,34,1,34,1,34,1,34,4,34,208,8,34,11,34,12,34,
  	209,1,34,1,34,4,34,214,8,34,11,34,12,34,215,1,34,1,34,5,34,220,8,34,10,
  	34,12,34,223,9,34,1,34,3,34,226,8,34,1,35,4,35,229,8,35,11,35,12,35,230,
  	1,35,1,35,5,35,235,8,35,10,35,12,35,238,9,35,1,35,1,35,3,35,242,8,35,
  	1,35,4,35,245,8,35,11,35,12,35,246,3,35,249,8,35,1,35,1,35,4,35,253,8,
  	35,11,35,12,35,254,1,35,1,35,3,35,259,8,35,1,35,4,35,262,8,35,11,35,12,
  	35,263,3,35,266,8,35,1,35,4,35,269,8,35,11,35,12,35,270,1,35,1,35,3,35,
  	275,8,35,1,35,4,35,278,8,35,11,35,12,35,279,3,35,282,8,35,1,36,4,36,285,
  	8,36,11,36,12,36,286,1,36,1,36,1,37,1,37,1,37,1,37,5,37,295,8,37,10,37,
  	12,37,298,9,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,5,38,309,
  	8,38,10,38,12,38,312,9,38,1,38,1,38,1,296,0,39,1,1,3,2,5,3,7,4,9,5,11,
  	6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
  	37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
  	30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,1,0,10,3,0,65,
  	90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,48,57,65,70,97,102,1,
  	0,48,55,1,0,49,57,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,3,0,9,10,
  	13,13,32,32,2,0,10,10,13,13,340,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
  	7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
  	0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
  	0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
  	1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
  	0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
  	0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
  	1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,81,1,0,
  	0,0,5,83,1,0,0,0,7,85,1,0,0,0,9,87,1,0,0,0,11,89,1,0,0,0,13,91,1,0,0,
  	0,15,93,1,0,0,0,17,95,1,0,0,0,19,97,1,0,0,0,21,99,1,0,0,0,23,101,1,0,
  	0,0,25,103,1,0,0,0,27,105,1,0,0,0,29,107,1,0,0,0,31,109,1,0,0,0,33,111,
  	1,0,0,0,35,113,1,0,0,0,37,116,1,0,0,0,39,119,1,0,0,0,41,122,1,0,0,0,43,
  	125,1,0,0,0,45,128,1,0,0,0,47,131,1,0,0,0,49,137,1,0,0,0,51,146,1,0,0,
  	0,53,149,1,0,0,0,55,154,1,0,0,0,57,160,1,0,0,0,59,167,1,0,0,0,61,173,
  	1,0,0,0,63,177,1,0,0,0,65,183,1,0,0,0,67,188,1,0,0,0,69,225,1,0,0,0,71,
  	281,1,0,0,0,73,284,1,0,0,0,75,290,1,0,0,0,77,304,1,0,0,0,79,80,5,44,0,
  	0,80,2,1,0,0,0,81,82,5,59,0,0,82,4,1,0,0,0,83,84,5,91,0,0,84,6,1,0,0,
  	0,85,86,5,93,0,0,86,8,1,0,0,0,87,88,5,61,0,0,88,10,1,0,0,0,89,90,5,123,
  	0,0,90,12,1,0,0,0,91,92,5,125,0,0,92,14,1,0,0,0,93,94,5,40,0,0,94,16,
  	1,0,0,0,95,96,5,41,0,0,96,18,1,0,0,0,97,98,5,43,0,0,98,20,1,0,0,0,99,
  	100,5,45,0,0,100,22,1,0,0,0,101,102,5,33,0,0,102,24,1,0,0,0,103,104,5,
  	42,0,0,104,26,1,0,0,0,105,106,5,47,0,0,106,28,1,0,0,0,107,108,5,37,0,
  	0,108,30,1,0,0,0,109,110,5,60,0,0,110,32,1,0,0,0,111,112,5,62,0,0,112,
  	34,1,0,0,0,113,114,5,60,0,0,114,115,5,61,0,0,115,36,1,0,0,0,116,117,5,
  	62,0,0,117,118,5,61,0,0,118,38,1,0,0,0,119,120,5,61,0,0,120,121,5,61,
  	0,0,121,40,1,0,0,0,122,123,5,33,0,0,123,124,5,61,0,0,124,42,1,0,0,0,125,
  	126,5,38,0,0,126,127,5,38,0,0,127,44,1,0,0,0,128,129,5,124,0,0,129,130,
  	5,124,0,0,130,46,1,0,0,0,131,132,5,98,0,0,132,133,5,114,0,0,133,134,5,
  	101,0,0,134,135,5,97,0,0,135,136,5,107,0,0,136,48,1,0,0,0,137,138,5,99,
  	0,0,138,139,5,111,0,0,139,140,5,110,0,0,140,141,5,116,0,0,141,142,5,105,
  	0,0,142,143,5,110,0,0,143,144,5,117,0,0,144,145,5,101,0,0,145,50,1,0,
  	0,0,146,147,5,105,0,0,147,148,5,102,0,0,148,52,1,0,0,0,149,150,5,101,
  	0,0,150,151,5,108,0,0,151,152,5,115,0,0,152,153,5,101,0,0,153,54,1,0,
  	0,0,154,155,5,119,0,0,155,156,5,104,0,0,156,157,5,105,0,0,157,158,5,108,
  	0,0,158,159,5,101,0,0,159,56,1,0,0,0,160,161,5,114,0,0,161,162,5,101,
  	0,0,162,163,5,116,0,0,163,164,5,117,0,0,164,165,5,114,0,0,165,166,5,110,
  	0,0,166,58,1,0,0,0,167,168,5,99,0,0,168,169,5,111,0,0,169,170,5,110,0,
  	0,170,171,5,115,0,0,171,172,5,116,0,0,172,60,1,0,0,0,173,174,5,105,0,
  	0,174,175,5,110,0,0,175,176,5,116,0,0,176,62,1,0,0,0,177,178,5,102,0,
  	0,178,179,5,108,0,0,179,180,5,111,0,0,180,181,5,97,0,0,181,182,5,116,
  	0,0,182,64,1,0,0,0,183,184,5,118,0,0,184,185,5,111,0,0,185,186,5,105,
  	0,0,186,187,5,100,0,0,187,66,1,0,0,0,188,192,7,0,0,0,189,191,7,1,0,0,
  	190,189,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,68,
  	1,0,0,0,194,192,1,0,0,0,195,196,5,48,0,0,196,197,5,120,0,0,197,199,1,
  	0,0,0,198,200,7,2,0,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,1,0,0,0,
  	201,202,1,0,0,0,202,226,1,0,0,0,203,204,5,48,0,0,204,205,5,88,0,0,205,
  	207,1,0,0,0,206,208,7,2,0,0,207,206,1,0,0,0,208,209,1,0,0,0,209,207,1,
  	0,0,0,209,210,1,0,0,0,210,226,1,0,0,0,211,213,5,48,0,0,212,214,7,3,0,
  	0,213,212,1,0,0,0,214,215,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,
  	226,1,0,0,0,217,221,7,4,0,0,218,220,7,5,0,0,219,218,1,0,0,0,220,223,1,
  	0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,226,1,0,0,0,223,221,1,0,0,0,
  	224,226,5,48,0,0,225,195,1,0,0,0,225,203,1,0,0,0,225,211,1,0,0,0,225,
  	217,1,0,0,0,225,224,1,0,0,0,226,70,1,0,0,0,227,229,7,5,0,0,228,227,1,
  	0,0,0,229,230,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,232,1,0,0,0,
  	232,236,5,46,0,0,233,235,7,5,0,0,234,233,1,0,0,0,235,238,1,0,0,0,236,
  	234,1,0,0,0,236,237,1,0,0,0,237,248,1,0,0,0,238,236,1,0,0,0,239,241,7,
  	6,0,0,240,242,7,7,0,0,241,240,1,0,0,0,241,242,1,0,0,0,242,244,1,0,0,0,
  	243,245,7,5,0,0,244,243,1,0,0,0,245,246,1,0,0,0,246,244,1,0,0,0,246,247,
  	1,0,0,0,247,249,1,0,0,0,248,239,1,0,0,0,248,249,1,0,0,0,249,282,1,0,0,
  	0,250,252,5,46,0,0,251,253,7,5,0,0,252,251,1,0,0,0,253,254,1,0,0,0,254,
  	252,1,0,0,0,254,255,1,0,0,0,255,265,1,0,0,0,256,258,7,6,0,0,257,259,7,
  	7,0,0,258,257,1,0,0,0,258,259,1,0,0,0,259,261,1,0,0,0,260,262,7,5,0,0,
  	261,260,1,0,0,0,262,263,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,266,
  	1,0,0,0,265,256,1,0,0,0,265,266,1,0,0,0,266,282,1,0,0,0,267,269,7,5,0,
  	0,268,267,1,0,0,0,269,270,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,
  	272,1,0,0,0,272,274,7,6,0,0,273,275,7,7,0,0,274,273,1,0,0,0,274,275,1,
  	0,0,0,275,277,1,0,0,0,276,278,7,5,0,0,277,276,1,0,0,0,278,279,1,0,0,0,
  	279,277,1,0,0,0,279,280,1,0,0,0,280,282,1,0,0,0,281,228,1,0,0,0,281,250,
  	1,0,0,0,281,268,1,0,0,0,282,72,1,0,0,0,283,285,7,8,0,0,284,283,1,0,0,
  	0,285,286,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,288,1,0,0,0,288,
  	289,6,36,0,0,289,74,1,0,0,0,290,291,5,47,0,0,291,292,5,42,0,0,292,296,
  	1,0,0,0,293,295,9,0,0,0,294,293,1,0,0,0,295,298,1,0,0,0,296,297,1,0,0,
  	0,296,294,1,0,0,0,297,299,1,0,0,0,298,296,1,0,0,0,299,300,5,42,0,0,300,
  	301,5,47,0,0,301,302,1,0,0,0,302,303,6,37,0,0,303,76,1,0,0,0,304,305,
  	5,47,0,0,305,306,5,47,0,0,306,310,1,0,0,0,307,309,8,9,0,0,308,307,1,0,
  	0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,313,1,0,0,0,312,
  	310,1,0,0,0,313,314,6,38,0,0,314,78,1,0,0,0,23,0,192,201,209,215,221,
  	225,230,236,241,246,248,254,258,263,265,270,274,279,281,286,296,310,1,
  	6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  miniclexerLexerStaticData = staticData.release();
}

}

MiniCLexer::MiniCLexer(CharStream *input) : Lexer(input) {
  MiniCLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *miniclexerLexerStaticData->atn, miniclexerLexerStaticData->decisionToDFA, miniclexerLexerStaticData->sharedContextCache);
}

MiniCLexer::~MiniCLexer() {
  delete _interpreter;
}

std::string MiniCLexer::getGrammarFileName() const {
  return "MiniC.g4";
}

const std::vector<std::string>& MiniCLexer::getRuleNames() const {
  return miniclexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& MiniCLexer::getChannelNames() const {
  return miniclexerLexerStaticData->channelNames;
}

const std::vector<std::string>& MiniCLexer::getModeNames() const {
  return miniclexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& MiniCLexer::getVocabulary() const {
  return miniclexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView MiniCLexer::getSerializedATN() const {
  return miniclexerLexerStaticData->serializedATN;
}

const atn::ATN& MiniCLexer::getATN() const {
  return *miniclexerLexerStaticData->atn;
}




void MiniCLexer::initialize() {
  ::antlr4::internal::call_once(miniclexerLexerOnceFlag, miniclexerLexerInitialize);
}
